"""
Цель задания:

Закрепить базовые знания об unit-тестировании в Python.
Создать класс для тестирования объектов другого класса.

Задание:
Urban решил устроить соревнования между студентами по бегу, ибо сидячий образ жизни ни к чему хорошему не приведёт.
Некоторые участники упорно готовились к нему, а некоторые даже вебинары не посещали по пройденным модулям.
Вот и получилось, что некоторые на соревнованиях бегали и выигрывали, а кто просто ходил по дистанции, те проигрывали.

Подготовить файлы проекта, предварительно клонировав их с GitHub себе в проект -
https://github.com/yanchuki/HumanMoveTest.git. В загруженном проекте находится модуль main с классом Student;
объектами этого класса вам и нужно будет управлять и тестировать их.
Создайте в отдельном модуле класс для тестирования (наследованный от TestCase).

Напишите 3 теста, где будут создаваться отдельные объекты класса Student:

Первый тест: у одного объекта должен запускать метод walk 10 раз, после чего должен возвращаться результат
сравнения полученных данных. В  случае провального теста должно выводится сообщение: Дистанции не равны
[дистанция человека(объекта)] != 500

Второй тест: у одного объекта должен запускать метод run 10 раз, после чего должен возвращаться результат
сравнения полученных данных. В  случае провального теста должно выводится сообщение: Дистанции не равны
 [дистанция человека(объекта)] != 1000

Третий тест: 2 объекта "соревнуются", один "бежит", другой "идёт" (тот самый студент, кто не посещает вебинары).
После чего должен возвращаться результат сравнения полученных данных. В  случае провального теста должно
выводится сообщение: [бегущий человек] должен преодолеть дистанцию больше, чем [идущий человек].

Рекомендуемые методы для тестирования:
assertEqual, assertGreather, assertLess
"""

import unittest

from HumanMove import Student

class HumanMoveTest(unittest.TestCase):
    def test_normal_1(self):
        result_1 = Student('Andrey')
        for i in range(10):
            result_1.walk()
        self.assertEqual(result_1.distance, 50, 'Дистанции не равны [дистанция человека(Andrey)] != 500')
        return result_1.distance

    def test_normal_2(self):
        result_2 = Student('Petr')
        for i in range(10):
            result_2.run()
        self.assertEqual(result_2.distance, 100, 'Дистанции не равны [дистанция человека(Petr)] != 1000')
        return result_2.distance


    def test_normal_3(self):
        self.assertLess(self.test_normal_1(), self.test_normal_2(), 'Petr должен преодолеть дистанцию больше, чем Andrey')

if __name__ == '__main__':
    unittest.main()
